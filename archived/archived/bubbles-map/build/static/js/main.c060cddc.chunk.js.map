{"version":3,"sources":["LatLong.tsx","SampleData.ts","MapBubble.tsx","App.tsx","serviceWorker.js","index.js"],"names":["LatLong","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentZoom","zoom","inherits","createClass","key","value","titleenabled","react_default","a","createElement","style","textAlign","title","viewPort","console","debug","resizeBubbles","setState","userZoom","_this2","allValues","data","map","d","maxValue","length","Math","max","apply","minValue","min","renderTitle","Map","height","width","center","latitude","longitude","onViewportChange","onViewPortChanged","TileLayer","url","name","CircleMarker","radius","low1","high1","low2","minRadius","high2","maxRadius","zoomFactor","color","bubblecolor","fillOpacity","stroke","Tooltip","direction","offset","opacity","concat","Component","DefaulData","React","CENTER","TITLE_ENABLED","TITLE","ZOOM","COLOR","MAX_RADIUS","MIN_RADIUS","RESIZE_BUBBLES","MapBubble","invalidDataSet","receiveEvent","event","params","properties","get","dataSet","isValid","cols","columns","type","validateDataset","isLatLong","forEach","latLongParts","split","trim","push","window","addEventListener","removeEventListener","LatLong_LatLong","App","className","MapBubble_MapBubble","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4SA0BO,IAAMA,EAAb,SAAAC,GACE,SAAAD,EAAYE,GAAqB,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IAC/BG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,YAAaT,EAAMU,MAHUT,EADnC,OAAAC,OAAAS,EAAA,EAAAT,CAAAJ,EAAAC,GAAAG,OAAAU,EAAA,EAAAV,CAAAJ,EAAA,EAAAe,IAAA,cAAAC,MAAA,WASI,OAAgC,IAA5BV,KAAKJ,MAAMe,aACNC,EAAAC,EAAAC,cAAA,MAAIC,MAAO,CAAEC,UAAW,WAAahB,KAAKJ,MAAMqB,OAEhD,OAZb,CAAAR,IAAA,oBAAAC,MAAA,SAgBoBQ,GAChBC,QAAQC,MAAMF,GACVlB,KAAKJ,MAAMyB,eACbrB,KAAKsB,SAAS,CACZjB,YAAaa,EAASZ,MAAQN,KAAKJ,MAAMU,SApBjD,CAAAG,IAAA,aAAAC,MAAA,WA0BI,IAAML,EAAcL,KAAKI,MAAMC,YACzBkB,EAAWvB,KAAKJ,MAAMU,KAC5B,OAAID,EAAckB,EACTlB,EAAckB,EAEhB,IA/BX,CAAAd,IAAA,SAAAC,MAAA,WAkCW,IAAAc,EAAAxB,KACDyB,EAAsBzB,KAAKJ,MAAM8B,KAAKC,IAAI,SAACC,GAAD,OAAOA,EAAElB,QACnDmB,EACJJ,EAAUK,OAAS,EAAIC,KAAKC,IAAIC,MAAMF,KAAMN,GAAaA,EAAU,GAC/DS,EAAWT,EAAUK,OAAS,EAAIC,KAAKI,IAAIF,MAAMF,KAAMN,GAAa,EAC1E,OACEb,EAAAC,EAAAC,cAAA,WACGd,KAAKoC,cACNxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CACEtB,MAAO,CAAEuB,OAAQ,QAASC,MAAO,QACjCjC,KAAMN,KAAKJ,MAAMU,KACjBkC,OAAQ,CAACxC,KAAKJ,MAAM6C,SAAUzC,KAAKJ,MAAM8C,WACzCC,iBAAkB,SAACzB,GAAD,OAAcM,EAAKoB,kBAAkB1B,KAEvDN,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAWC,IAAI,sDAEd9C,KAAKJ,MAAM8B,KAAKC,IAAI,SAACC,GACpB,OACEhB,EAAAC,EAAAC,cAAA,OAAKL,IAAKmB,EAAEmB,MACVnC,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CACEvC,IAAKmB,EAAEmB,KACPP,OAAQ,CAACZ,EAAEa,SAAUb,EAAEc,WACvBO,QA5DCvC,EA8DGkB,EAAElB,MA9DEwC,EA+DJhB,EA/DUiB,EAgEVtB,EAhEiBuB,EAiEjB5B,EAAK5B,MAAMyD,UAjEYC,EAkEvB9B,EAAK5B,MAAM2D,WAjExBH,GAASE,EAAQF,IAAS1C,EAAQwC,IAAUC,EAAQD,IAkErC1B,EAAKgC,cAEXC,MAAOjC,EAAK5B,MAAM8D,YAClBC,YAAa,GACbC,QAAQ,GAERhD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,CAASC,UAAU,QAAQC,OAAQ,EAAE,GAAI,GAAIC,QAAS,GACpDpD,EAAAC,EAAAC,cAAA,eAAAmD,OAAUrC,EAAEmB,KAAZ,MAAAkB,OAAqBrC,EAAElB,WA1E3C,IAAmBA,EAAOwC,EAAMC,EAAOC,EAAME,UAI7C5D,EAAA,CAA6BwE,aCxBhBC,EAAqB,CAChC,CAAEpB,KAAM,QAASL,UAAW,SAAUD,SAAU,QAAS/B,MAAO,SAChE,CAAEqC,KAAM,UAAWL,UAAW,QAASD,UAAW,OAAQ/B,MAAO,SACjE,CAAEqC,KAAM,QAASL,UAAW,QAASD,SAAU,QAAS/B,MAAO,SAC/D,CAAEqC,KAAM,QAASL,UAAW,QAASD,SAAU,QAAS/B,MAAO,QAC/D,CAAEqC,KAAM,WAAYL,UAAW,SAAUD,SAAU,QAAS/B,MAAO,SACnE,CAAEqC,KAAM,UAAWL,UAAW,QAASD,SAAU,QAAS/B,MAAO,SACjE,CAAEqC,KAAM,UAAWL,UAAW,SAAUD,SAAU,QAAS/B,MAAO,SAClE,CAAEqC,KAAM,SAAUL,UAAW,QAASD,SAAU,OAAQ/B,MAAO,SAC/D,CAAEqC,KAAM,QAASL,UAAW,SAAUD,SAAU,QAAS/B,MAAO,SAChE,CAAEqC,KAAM,SAAUL,UAAW,QAASD,SAAU,QAAS/B,MAAO,QAChE,CAAEqC,KAAM,QAASL,UAAW,QAASD,SAAU,QAAS/B,MAAO,SAC/D,CAAEqC,KAAM,UAAWL,UAAW,SAAUD,SAAU,QAAS/B,MAAO,SAClE,CAAEqC,KAAM,UAAWL,UAAW,QAASD,SAAU,QAAS/B,MAAO,SACjE,CAAEqC,KAAM,WAAYL,UAAW,QAASD,SAAU,QAAS/B,MAAO,UCXhEwD,EAAYE,IAAMF,UAehBG,EAAS,CAAC,QAAS,SACnBC,GAAgB,EAChBC,EAAQ,+BACRC,EAAO,EACPC,EAAQ,OACRC,EAAa,GACbC,EAAa,EACbC,GAAiB,EAuDhB,IAAMC,EAAb,SAAAlF,GAGE,SAAAkF,EAAYjF,GAAqB,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA6E,IAC/BhF,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA+E,GAAA1E,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXqC,SAAU4B,EAAO,GACjB3B,UAAW2B,EAAO,GAClB1D,aAAc2D,EACdrD,MAAOsD,EACPjE,KAAMkE,EACNd,YAAae,EACblB,UAAWmB,EACXrB,UAAWsB,EACXjD,KAAMyC,EACN9C,cAAeuD,EACfE,gBAAgB,GAGlBjF,EAAKkF,aAAe,SAACC,GACnB,IAAMC,EAASD,EAAMtD,KAAKwD,WACpBzC,GAAawC,EAAOE,IAAI,YACxBzC,GAAcuC,EAAOE,IAAI,aACzBxE,EAAuD,UAAvCsE,EAAOE,IAAI,gBAC3BlE,EAASgE,EAAOE,IAAI,SACpB7E,GAAS2E,EAAOE,IAAI,QACpB5B,GAAc0B,EAAOE,IAAI,aACzB9B,GAAc4B,EAAOE,IAAI,aACzBzB,EAAeuB,EAAOE,IAAI,eAC1B9D,EAAyD,SAAxC4D,EAAOE,IAAI,iBAE5BC,EAAUH,EAAOE,IAAI,WAEvBzD,EAAeyC,EAEfkB,EArFV,SAAyBD,GACvB,GAAIA,EAAS,CACX,IAAME,EAAOF,EAAQG,QAGrB,GAAoB,IAAhBD,EAAKxD,OACP,OACoB,SAAjBwD,EAAK,GAAGE,MAAoC,UAAjBF,EAAK,GAAGE,OACnB,WAAjBF,EAAK,GAAGE,OACU,SAAjBF,EAAK,GAAGE,MAAoC,UAAjBF,EAAK,GAAGE,MAIxC,GAAoB,IAAhBF,EAAKxD,OACP,OACoB,SAAjBwD,EAAK,GAAGE,MAAoC,UAAjBF,EAAK,GAAGE,OACnB,WAAjBF,EAAK,GAAGE,MACS,WAAjBF,EAAK,GAAGE,MACS,WAAjBF,EAAK,GAAGE,KAKd,OAAO,EA8DWC,CAAgBL,GAG9B,GAAIC,EAAS,CACX3D,EAAO,GACP,IAAMgE,EAAwC,SAA5BN,EAAQG,QAAQ,GAAGC,KAErCJ,EAAQ1D,KAAKiE,QAAQ,SAAC/D,GACpB,IAAIa,EACAC,EACJ,GAAIgD,EAAW,CACb,IACME,EADWhE,EAAE,GACUiE,MAAM,KACnCpD,GAAYmD,EAAa,GAAGE,OAC5BpD,GAAakD,EAAa,GAAGE,YAE7BrD,GAAYb,EAAE,GACdc,GAAad,EAAE,GAGjBF,EAAKqE,KAAK,CACRhD,KAAOnB,EAAE,GACTlB,OAAQkB,EAAE,GACVa,SAAUA,EACVC,UAAWA,MAKjB7C,EAAKyB,SAAS,CACZmB,SAAUA,GAAY4B,EAAO,GAC7B3B,UAAWA,GAAa2B,EAAO,GAC/B1D,aAAcA,EACdM,MAAOA,GAASsD,EAChBjE,KAAMA,GAAQkE,EACdd,YAAaA,EAAc,IAAMA,EAAce,EAC/ClB,UAAWA,GAAamB,EACxBrB,UAAWA,GAAasB,EACxBjD,KAAMA,EACNoD,gBAAiBO,EACjBhE,cAAeA,KAzEYxB,EAHnC,OAAAC,OAAAS,EAAA,EAAAT,CAAA+E,EAAAlF,GAAAG,OAAAU,EAAA,EAAAV,CAAA+E,EAAA,EAAApE,IAAA,oBAAAC,MAAA,WAiFIsF,OAAOC,iBAAiB,UAAWjG,KAAK+E,cAAc,KAjF1D,CAAAtE,IAAA,uBAAAC,MAAA,WAqFIsF,OAAOE,oBAAoB,UAAWlG,KAAK+E,cAAc,KArF7D,CAAAtE,IAAA,SAAAC,MAAA,WAwFI,OACEE,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEwB,MAAO,OAAQD,OAAQ,SAClCtC,KAAKI,MAAM0E,eACVlE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,cAhJZ,mHAmJU,KACJF,EAAAC,EAAAC,cAACqF,EAAYnG,KAAKI,YAjG1ByE,EAAA,CAA+BX,GCpEhBkC,MATf,WAEE,OACExF,EAAAC,EAAAC,cAAA,OAAKuF,UAAU,OACbzF,EAAAC,EAAAC,cAACwF,EAAD,QCGcC,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhG,EAAAC,EAAAC,cAAC+F,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c060cddc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Data } from \"./Data\";\nimport { Map, CircleMarker, TileLayer, Tooltip, Viewport } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\n\nexport interface LatLongProps {\n  latitude: number;\n  longitude: number;\n  titleenabled: boolean;\n  title: string;\n  zoom: number;\n  bubblecolor: string;\n  data: Data[];\n  maxRadius: number;\n  minRadius: number;\n  resizeBubbles: boolean;\n}\n\nexport interface LatLongState {\n  currentZoom: number;\n}\n\nfunction map_range(value, low1, high1, low2, high2) {\n  return low2 + ((high2 - low2) * (value - low1)) / (high1 - low1);\n}\n\nexport class LatLong extends Component<LatLongProps, LatLongState> {\n  constructor(props: LatLongProps) {\n    super(props);\n    this.state = {\n      currentZoom: props.zoom,\n    };\n  }\n\n  renderTitle() {\n    if (this.props.titleenabled === true) {\n      return <h3 style={{ textAlign: \"center\" }}>{this.props.title}</h3>;\n    } else {\n      return null;\n    }\n  }\n\n  onViewPortChanged(viewPort: Viewport) {\n    console.debug(viewPort);\n    if (this.props.resizeBubbles) {\n      this.setState({\n        currentZoom: viewPort.zoom || this.props.zoom,\n      });\n    }\n  }\n\n  zoomFactor(): number {\n    const currentZoom = this.state.currentZoom;\n    const userZoom = this.props.zoom;\n    if (currentZoom > userZoom) {\n      return currentZoom / userZoom;\n    }\n    return 1;\n  }\n\n  render() {\n    const allValues: number[] = this.props.data.map((d) => d.value);\n    const maxValue =\n      allValues.length > 1 ? Math.max.apply(Math, allValues) : allValues[0];\n    const minValue = allValues.length > 1 ? Math.min.apply(Math, allValues) : 0;\n    return (\n      <div>\n        {this.renderTitle()}\n        <Map\n          style={{ height: \"480px\", width: \"100%\" }}\n          zoom={this.props.zoom}\n          center={[this.props.latitude, this.props.longitude]}\n          onViewportChange={(viewPort) => this.onViewPortChanged(viewPort)}\n        >\n          <TileLayer url=\"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\n\n          {this.props.data.map((d) => {\n            return (\n              <div key={d.name}>\n                <CircleMarker\n                  key={d.name}\n                  center={[d.latitude, d.longitude]}\n                  radius={\n                    map_range(\n                      d.value,\n                      minValue,\n                      maxValue,\n                      this.props.minRadius,\n                      this.props.maxRadius\n                    ) * this.zoomFactor()\n                  }\n                  color={this.props.bubblecolor}\n                  fillOpacity={0.5}\n                  stroke={false}\n                >\n                  <Tooltip direction=\"right\" offset={[-8, -2]} opacity={1}>\n                    <span>{`${d.name}: ${d.value}`}</span>\n                  </Tooltip>\n                </CircleMarker>\n              </div>\n            );\n          })}\n        </Map>\n      </div>\n    );\n  }\n}\n","import { Data } from \"./Data\";\n\nexport const DefaulData: Data[] = [\n  { name: \"Tokyo\", longitude: 139.6917, latitude: 35.6895, value: 37843000 },\n  { name: \"Jakarta\", longitude: 106.865, latitude: -6.1751, value: 30539000 },\n  { name: \"Delhi\", longitude: 77.1025, latitude: 28.7041, value: 24998000 },\n  { name: \"Seoul\", longitude: 126.978, latitude: 37.5665, value: 23480000 },\n  { name: \"Shanghai\", longitude: 121.4737, latitude: 31.2304, value: 23416000 },\n  { name: \"Karachi\", longitude: 67.0099, latitude: 24.8615, value: 22123000 },\n  { name: \"Beijing\", longitude: 116.4074, latitude: 39.9042, value: 21009000 },\n  { name: \"Mumbai\", longitude: 72.8777, latitude: 19.076, value: 17712000 },\n  { name: \"Osaka\", longitude: 135.5022, latitude: 34.6937, value: 17444000 },\n  { name: \"Moscow\", longitude: 37.6173, latitude: 55.7558, value: 16170000 },\n  { name: \"Dhaka\", longitude: 90.4125, latitude: 23.8103, value: 15669000 },\n  { name: \"Bangkok\", longitude: 100.5018, latitude: 13.7563, value: 14998000 },\n  { name: \"Kolkata\", longitude: 88.3639, latitude: 22.5726, value: 14667000 },\n  { name: \"Istanbul\", longitude: 28.9784, latitude: 41.0082, value: 13287000 },\n];\n","import React from \"react\";\nimport { LatLong } from \"./LatLong\";\nimport \"leaflet/dist/leaflet.css\";\nimport { Data } from \"./Data\";\nimport { DefaulData } from \"./SampleData\";\nvar Component = React.Component;\n\ntype ColumnType = \"TEXT\" | \"LABEL\" | \"DATE\" | \"NUMBER\";\n\ninterface Column {\n  name: string;\n  type: ColumnType;\n}\n\ninterface DataSet {\n  columns: Column[];\n  data: string[][];\n}\n\n// Default Values\nconst CENTER = [28.7041, 77.1025];\nconst TITLE_ENABLED = true;\nconst TITLE = \"Most Populous Cities in Asia\";\nconst ZOOM = 1;\nconst COLOR = \"blue\";\nconst MAX_RADIUS = 20;\nconst MIN_RADIUS = 2;\nconst RESIZE_BUBBLES = true;\n\n// constants\nconst INVALID_DATASET_MESSAGE =\n  \"Provided dataset is not valid. Please check Map Component instructions for more details. Showing sample data.\";\n\nfunction validateDataset(dataSet: DataSet): boolean {\n  if (dataSet) {\n    const cols = dataSet.columns;\n\n    // Case where lat/long is possibly in a concatenate value divided by comma\n    if (cols.length === 3) {\n      return (\n        (cols[0].type === \"TEXT\" || cols[0].type === \"LABEL\") &&\n        cols[1].type === \"NUMBER\" &&\n        (cols[2].type === \"TEXT\" || cols[2].type === \"LABEL\")\n      );\n    }\n    // Case where lat and long are provided in different columns\n    if (cols.length === 4) {\n      return (\n        (cols[0].type === \"TEXT\" || cols[0].type === \"LABEL\") &&\n        cols[1].type === \"NUMBER\" &&\n        cols[2].type === \"NUMBER\" &&\n        cols[3].type === \"NUMBER\"\n      );\n    }\n  }\n\n  return false;\n}\n\nexport interface LatLongProps {\n  latitude?: number;\n  longitude?: number;\n  titleenabled?: boolean;\n  title?: string;\n  zoom?: number;\n  bubblecolor?: string;\n}\n\ninterface State {\n  latitude: number;\n  longitude: number;\n  titleenabled: boolean;\n  title: string;\n  zoom: number;\n  bubblecolor: string;\n  maxRadius: number;\n  minRadius: number;\n  data: Data[];\n  invalidDataSet: boolean;\n  resizeBubbles: boolean;\n}\n\nexport class MapBubble extends Component<LatLongProps, State> {\n  receiveEvent: (event: any) => void;\n\n  constructor(props: LatLongProps) {\n    super(props);\n\n    this.state = {\n      latitude: CENTER[0],\n      longitude: CENTER[1],\n      titleenabled: TITLE_ENABLED,\n      title: TITLE,\n      zoom: ZOOM,\n      bubblecolor: COLOR,\n      maxRadius: MAX_RADIUS,\n      minRadius: MIN_RADIUS,\n      data: DefaulData,\n      resizeBubbles: RESIZE_BUBBLES,\n      invalidDataSet: false,\n    };\n\n    this.receiveEvent = (event: any) => {\n      const params = event.data.properties as Map<string, object>;\n      const latitude = +(params.get(\"latitude\") as any);\n      const longitude = +(params.get(\"longitude\") as any);\n      const titleenabled = (params.get(\"titleenabled\") as any) === \"false\";\n      const title = (params.get(\"title\") as any) as string;\n      const zoom = +(params.get(\"zoom\") as any);\n      const maxRadius = +(params.get(\"maxRadius\") as any);\n      const minRadius = +(params.get(\"minRadius\") as any);\n      const bubblecolor = (params.get(\"bubblecolor\") as any) as string;\n      const resizeBubbles = (params.get(\"resizeBubbles\") as any) === \"true\";\n\n      const dataSet = params.get(\"dataSet\") as DataSet;\n\n      let data: Data[] = DefaulData;\n\n      let isValid = validateDataset(dataSet);\n\n      // retrieving data\n      if (isValid) {\n        data = [];\n        const isLatLong = dataSet.columns[2].type === \"TEXT\";\n\n        dataSet.data.forEach((d) => {\n          let latitude: number;\n          let longitude: number;\n          if (isLatLong) {\n            const latLong = (d[2] as any) as string;\n            const latLongParts = latLong.split(\",\");\n            latitude = +latLongParts[0].trim();\n            longitude = +latLongParts[1].trim();\n          } else {\n            latitude = +d[2];\n            longitude = +d[3];\n          }\n\n          data.push({\n            name: (d[0] as any) as string,\n            value: +d[1],\n            latitude: latitude,\n            longitude: longitude,\n          });\n        });\n      }\n\n      this.setState({\n        latitude: latitude || CENTER[0],\n        longitude: longitude || CENTER[1],\n        titleenabled: titleenabled,\n        title: title || TITLE,\n        zoom: zoom || ZOOM,\n        bubblecolor: bubblecolor ? \"#\" + bubblecolor : COLOR,\n        maxRadius: maxRadius || MAX_RADIUS,\n        minRadius: minRadius || MIN_RADIUS,\n        data: data,\n        invalidDataSet: !isValid,\n        resizeBubbles: resizeBubbles,\n      });\n    };\n  }\n  componentDidMount() {\n    window.addEventListener(\"message\", this.receiveEvent, false);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"message\", this.receiveEvent, false);\n  }\n  render() {\n    return (\n      <div style={{ width: \"auto\", height: \"auto\" }}>\n        {this.state.invalidDataSet ? (\n          <div>\n            <em>\n              <strong>{INVALID_DATASET_MESSAGE}</strong>\n            </em>\n          </div>\n        ) : null}\n        <LatLong {...this.state} />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport \"leaflet/dist/leaflet.css\";\nimport  { MapBubble }  from './MapBubble';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <MapBubble />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}